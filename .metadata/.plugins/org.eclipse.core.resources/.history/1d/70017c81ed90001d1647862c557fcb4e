package main.java.com.visualnuts;

public class Exercise1 {

	/**
	 * 
	 * @param start
	 * 	Initial number of the sequence to be printed
	 * @param finish
	 * 	Final number of the sequence to be printed
	 * @param visual
	 * 	Number in witch its multiples will be replaced by the word "Visual"
	 * @param nuts
	 * 	Number in witch its multiples will be replaced by the word "Nuts"
	 */
	private static void printNumbers(int start, int finish, int visual, int nuts) {
		if(start >= finish) {
			System.out.println("Inicial number must be inferior to the final number");
			return;
		}
		
		for(int i = start; i<= finish; i++) {
			if((i % visual == 0) && (i % nuts == 0)){
				System.out.println("Visual Nuts");
			}else if(i % visual == 0) {
				System.out.println("Visual");
			}else if(i % nuts == 0) {
				System.out.println("Nuts");
			}else
				System.out.println(i);
		}
	}
	
	public static void main(String[] args) {
		/*
		 * Write or describe an algorithm that prints the whole integer numbers to the console, start
		 * from the number 1, and print all numbers going up to the number 100.
		 * However, when the number is divisible by 3, do not print the number, but print the word
		 * 'Visual'. If the number is divisible by 5, do not print the number, but print 'Nuts'. And for all
		 * numbers divisible by both (eg: the number 15) the same, but print 'Visual Nuts'.
		 */
		//printNumbers(1,100,3,5);
		
		/*
		 * How will you keep this code safe from bugs? Show how you would guarantee that this code
		 * keeps working when developers start making small feature adjustments. (Maybe we would
		 * want to print the first 500 numbers, ...).
		 */
		
		// Although it might seem impossible to keep a code completely immune to bugs, I have made this in a way that
		// you can try to print numbers in different ranges and changing them to words in multiples of other params
		// changing only the parameters of the called method. As an example, there are some lines to test below.
		
		//printNumbers(100,100,2,7);
		
		//printNumbers(100,300,4,8);
		
		//printNumbers(1,10,11,12);
		
		//printNumbers(1,20,3,3);
		
		printNumbers(123456,654321, 123, 456);
		
	}
	
	
}
